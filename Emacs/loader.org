#+TITLE: My GNU Emacs configuration
#+STARTUP: indent content
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
#+EXCLUDE_TAGS: noexport

* Introduction

This is my version of an configuration file for GNU Emacs.

I have been using GNU Emacs for over 20 years. [[https://arjenwiersma.nl/writeups/emacs/22-years-of-emacs/][I wrote an article about my journey]]. I was introduced to it by my mentor at Personify Inc. Sadly Personify Inc was victim to the dot com bust of 2001. I have been using GNU Emacs for everything since then though.

You can find the latest version of this configuration at https://github.com/credmp/emacs-config or at https://gitlab.com/buildfunthings/emacs-config.

I modeled this set of files based off of the emacs-starter-kit at https://github.com/eschulte/emacs24-starter-kit.

* A secure Emacs environment

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets up the configuration to adhere to the articles recommendations.

#+BEGIN_SRC shell :exports none
python -m pip install --user certifi
#+END_SRC

#+begin_src emacs-lisp 
  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))
#+END_SRC

* Tuning Emacs itself
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* Installing use-package
** Setup

GNU Emacs has a lot of packages that make things very easy for the
user. The package management infrastructure makes it a breeze to
install new packages and keep up-to-date with their development.

There are several package archives available for GNU Emacs:

- GNU
- Marmalade
- Melpa

Each archive will write its files in a separate archive directory.

#+name: credmp-package
#+begin_src emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP
access to the GNU archive, I set the variable to `nil` before adding
the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp
  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))

  ;; Add marmalade to package repos
  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
#+end_src

Initialize the archive and refresh the contents in case there is no
cached archive.

#+name: credmp-package-refresh
#+begin_src emacs-lisp
  (when (< emacs-major-version 27)
    (package-initialize))

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                  (when (< emacs-major-version 27)
                    (package-initialize))
                  (package-install name)))))
          packages)
    (when (< emacs-major-version 27)
      (package-initialize))
    (delete-other-windows))
#+end_src

** The package

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src

** Configure use-package to use straight

#+name: credmp-package-use-straight
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;; The following is VERY IMPORTANT.  Write hooks using their real name
  ;; instead of a shorter version: after-init ==> `after-init-hook'.
  ;;
  ;; This is to empower help commands with their contextual awareness,
  ;; such as `describe-symbol'.
  (setq use-package-hook-name-suffix nil)
  (straight-use-package '(org :type built-in))
#+end_src

** Diminish modes

Using diminish it allows you to control which modes show up in your modeline and which ones are somewhere in the background.

#+name: credmp-install-diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* Moving around

Be sure to just ask for y/n instead of yes/no.

#+name: credmp-yes-or-no
#+begin_src emacs-lisp  
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use the counsel and swiper packages to make the use of M-x and search a lot easier. Regular expression based searching for most areas. Alternatively take a look at ~orderless~.

#+name: credmp-counsel
#+begin_src emacs-lisp  
  (use-package smex)

  (use-package counsel
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper
    ;;    :pin melpa-stable
    :diminish ivy-mode

    :bind*
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("C-x C-f" . counsel-find-file)
     ("C-c h f" . counsel-describe-function)
     ("C-c h v" . counsel-describe-variable)
     ("C-c i u" . counsel-unicode-char)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ("C-x b" . counsel-switch-buffer)
     ;;      ("C-c l" . scounsel-locate)
     )
    :custom
    (ivy-use-virtual-buffers t)
    (counsel-switch-buffer-preview-virtual-buffers nil)
    :config
    (progn
      (ivy-mode 1)

      (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
      (ivy-set-actions
       'counsel-find-file
       '(("d" (lambda (x) (delete-file (expand-file-name x)))
          "delete"
          )))
      (ivy-set-actions
       'ivy-switch-buffer
       '(("k"
          (lambda (x)
            (kill-buffer x)
            (ivy--reset-state ivy-last))
          "kill")
         ("j"
          ivy--switch-buffer-other-window-action
          "other window")))))

  (use-package counsel-projectile
    :init
    (counsel-projectile-mode))

  ;; for use in selections, press C-o and select multiple
  (use-package ivy-hydra )
#+END_SRC

Make all the ivy buffers richer with the information they provide, also include icons when appropriate.

#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))
#+end_src

From [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs]] a more concise way to kill the buffer.

#+name: credmp-kill-buffer
#+begin_src emacs-lisp
  (defun bjm/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  
  (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+end_src

Mouse wheel scrolling can be quite annoying, lets fix it to scroll smoothly. Better yet, do not use a mouse!

#+name: credmp-mouse-wheel
#+begin_src emacs-lisp 
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+end_src

#+name: credmp-projectile
#+begin_src emacs-lisp 
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :custom
    (projectile-create-missing-test-files t)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src

** Buffers

Extracted from [[https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-ibuffer.el][Centaur Emacs]]. This provides a very nice overview of all the buffers active in the current Emacs instance, grouped by project.

#+begin_src  emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
    :config
    ;; Display icons for buffers
    (use-package all-the-icons-ibuffer
      :init
      ;;(setq all-the-icons-ibuffer-icon centaur-icon)
      (all-the-icons-ibuffer-mode 1))

    (with-eval-after-load 'counsel
      (with-no-warnings
        (defun my-ibuffer-find-file ()
          (interactive)
          (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                     (if (buffer-live-p buf)
                                         (with-current-buffer buf
                                           default-directory)
                                       default-directory))))
            (counsel-find-file default-directory)))
        (advice-add #'ibuffer-find-file :override #'my-ibuffer-find-file))))

  ;; Group ibuffer's list by project root
  (use-package ibuffer-projectile
    :functions all-the-icons-octicon ibuffer-do-sort-by-alphabetic
    :hook ((ibuffer . (lambda ()
                        (ibuffer-projectile-set-filter-groups)
                        (unless (eq ibuffer-sorting-mode 'alphabetic)
                          (ibuffer-do-sort-by-alphabetic)))))
    :config
    (setq ibuffer-projectile-prefix
          (concat
           (all-the-icons-octicon "file-directory"
                                  :face ibuffer-filter-group-name-face
                                  :v-adjust 0.0
                                  :height 1.0)
           " ")
            ))

  ;; Show the version control status of the buffer
  (use-package ibuffer-vc
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+end_src
* Discover-ability

#+name: credmp-which-key
#+begin_src emacs-lisp  
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC


** Recent files

#+name: credmp-recent-files
#+begin_src emacs-lisp
  (setq recentf-max-saved-items 50)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))

  (use-package recentf
    :custom
    (recentf-save-file   (expand-file-name "recentf" init-dir) )
    (recentf-max-saved-items 200)
    (recentf-exclude '(".gz" ".xz" ".zip" "/elpa/" "/ssh:" "/sudo:"))
    :config
    (recentf-mode 1)
    :bind (("\C-x\ \C-r"  . counsel-recentf)))
#+end_src
* Writing

** Grammar checking

I want to write decent English and Dutch. To that end I do not only need a decent spell checker but also a grammar checker. [[https://languagetool.org/][LanguageTool]] provides a language independent mechanism to check grammar. Get the desktop (offline) version from the website.

#+begin_src 
wget https://languagetool.org/download/LanguageTool-4.8.zip
unzip LanguageTool-4.8.zip
#+end_src

Then include the ~langtool~ package. This process checks every word in the buffer and does not consider things like code blocks, so only use on actual text files or perhaps narrow the region?

#+begin_src emacs-lisp 
  (use-package langtool
    :config (setq langtool-language-tool-server-jar (concat user-emacs-directory "/LanguageTool-5.8/languagetool-server.jar"))
    :bind (("\C-x4w" . langtool-check)
           ("\C-x4W" . langtool-check-done)
           ("\C-x4l" . langtool-switch-default-language)
           ("\C-x44" . langtool-show-message-at-point)
           ("\C-x4c" . langtool-correct-buffer)))
#+end_src
** Word wrapping

Please wrap text around when in text-modes. Also enable flyspell to catch nasty writing errors.

#+begin_src emacs-lisp  
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
                     (flyspell-mode 1)
                     (visual-line-mode 1)
                     )))
#+END_SRC

** Editing experience

From [[https://www.masteringemacs.org/article/text-expansion-hippie-expand][Mastering Emacs]].
#+begin_src 
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :config
  (setq-default scroll-preserve-screen-position t)
  (setq-default scroll-conservatively 1) ; affects `scroll-step'
  (setq-default scroll-margin 0)

  (define-minor-mode prot/scroll-centre-cursor-mode
    "Toggle centred cursor scrolling behaviour."
    :init-value nil
    :lighter " S="
    :global nil
    (if prot/scroll-centre-cursor-mode
        (setq-local scroll-margin (* (frame-height) 2)
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5)
      (dolist (local '(scroll-preserve-screen-position
                       scroll-conservatively
                       maximum-scroll-margin
                       scroll-margin))
        (kill-local-variable `,local))))

  ;; C-c l is used for `org-store-link'.  The mnemonic for this is to
  ;; focus the Line and also works as a variant of C-l.
  :bind ("C-c L" . prot/scroll-centre-cursor-mode))
#+end_src

*** Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c C->") 'mc/mark-next-word-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

*** Operate on whole line

#+begin_src emacs-lisp
(use-package whole-line-or-region)
#+end_src
** Corrections

#+begin_src emacs-lisp
(use-package flyspell-popup
:config
(define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct))
#+end_src

** Markdown support

Markdown is a great way to write documentation, not as good as org-mode of course, but generally accepted as a standard.

#+begin_src emacs-lisp  
  (use-package markdown-mode)
#+END_SRC

** HTMLize buffers

When exporting documents to HTML documents, such as code fragments, we need to htmlize.

#+begin_src emacs-lisp  
  (use-package htmlize)
#+END_SRC

** Exports
Export ORG code fragments with a particular theme.

#+begin_src emacs-lisp  
  (defun my/with-theme (theme fn &rest args)
    (let ((current-themes custom-enabled-themes))
      (mapcar #'disable-theme custom-enabled-themes)
      (load-theme theme t)
      (let ((result (apply fn args)))
        (mapcar #'disable-theme custom-enabled-themes)
        (mapcar (lambda (theme) (load-theme theme t)) current-themes)
        result)))

  ;; (advice-add #'org-export-to-file :around (apply-partially #'my/with-theme 'modus-operandi))
  ;; (advice-add #'org-export-to-buffer :around (apply-partially #'my/with-theme 'modus-operandi))

#+END_SRC


** Undo

The ~undo-tree~ package allows you to go through all your edits in the undo tree.

#+begin_src emacs-lisp  
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-auto-save-history nil))
#+END_SRC

#+begin_src emacs-lisp 
    (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))

;; Handy key definition
    (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src

** Selection

#+begin_src emacs-lisp 
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src


** Latex

#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure auctex
    :config
    (setq reftex-plug-into-AUCTeX t)
    ;; So that RefTeX also recognizes \addbibresource. Note that you
    ;; can't use $HOME in path for \addbibresource but that "~"
    ;; works.
    (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
    )
  
(use-package company-auctex
    :config
    (company-auctex-init))
#+end_src

#+begin_src emacs-lisp
  (use-package latex-preview-pane)
#+end_src

#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

#+begin_src emacs-lisp
  (use-package citar
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :custom
    (citar-file-note-org-include '(org-id org-roam-ref))
    (citar-bibliography '("~/stack/Studie/Open-Universiteit/My-Library.bib"))
    (citar-notes-paths '("~/stack/roam/papers"))
    )
#+end_src

#+begin_src emacs-lisp
  (use-package citar-org-roam
    :straight
    (citar-org-roam :host github
                   :repo "emacs-citar/citar-org-roam"
                   :files ("citar-org-roam.el"))
    :after citar org-roam
    :no-require
    :config (citar-org-roam-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package company-bibtex
    :config
    (add-to-list 'company-backends 'company-bibtex)
    :custom
    (company-bibtex-bibliography '("~/stack/Studie/Open-Universiteit/My-Library.bib"))
    )
#+end_src

** Olivetti Mode

#+begin_src emacs-lisp
  (use-package olivetti
    :diminish
    :config
    (setq olivetti-body-width 0.65)
    (setq olivetti-minimum-body-width 72)
    (setq olivetti-recall-visual-line-mode-entry-state t)
    :bind ("C-c o" . olivetti-mode)  
  )
#+end_src

* Programming

** General programming

As I write a lot of Lisp like code, either in GNU Emacs or in Clojure I like to have my environment setup for these languages. This is greatly supported by Paredit. [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Dan Midwood]] has a great guide to using paredit.

The structured editing of paredit is usefull in a LOT of languages, as long as there are parenthesis, brackets or quotes.

*** Tabs vs Spaces

#+begin_src emacs-lisp  
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Utilities

String manipulation routines for emacs lisp

#+begin_src emacs-lisp  
  (use-package s)
#+END_SRC

Hydras are the most awesome thing in the world. Check out [[https://github.com/abo-abo/hydra][the project page]] for some great examples.

#+begin_src emacs-lisp  
  (use-package hydra)
#+END_SRC

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook
              (lambda()
                (rainbow-delimiters-mode)
                )))
  (require 'cl-lib)
  (require 'color)
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
     (cl-callf color-saturate-name (face-foreground face) 30)))

  (show-paren-mode)
#+end_src


#+begin_src emacs-lisp
(use-package auto-compile)
#+end_src
*** Code Folding

#+begin_src emacs-lisp 
  (use-package hideshow
    :bind (("C-c C-h >" . my-toggle-hideshow-all)
           ("C-c C-h <" . hs-hide-level)
           ("C-;" . hs-toggle-hiding))
    :config
    ;; Hide the comments too when you do a 'hs-hide-all'
    (setq hs-hide-comments nil)
    ;; Set whether isearch opens folded comments, code, or both
    ;; where x is code, comments, t (both), or nil (neither)
    (setq hs-isearch-open t)
    ;; Add more here

    (setq hs-set-up-overlay
          (defun my-display-code-line-counts (ov)
            (when (eq 'code (overlay-get ov 'hs))
              (overlay-put ov 'display
                           (propertize
                            (format " ... <%d> "
                                    (count-lines (overlay-start ov)
                                                 (overlay-end ov)))
                            'face 'font-lock-type-face)))))

    (defvar my-hs-hide nil "Current state of hideshow for toggling all.")
         ;;;###autoload
    (defun my-toggle-hideshow-all () "Toggle hideshow all."
           (interactive)
           (setq my-hs-hide (not my-hs-hide))
           (if my-hs-hide
               (hs-hide-all)
             (hs-show-all)))

    (add-hook 'prog-mode-hook (lambda ()
                                (hs-minor-mode 1)
                                )))
#+END_SRC

*** Look and feel

Enable the prettify symbols mode. It will translate (fn) to the lambda
sign.

#+begin_src emacs-lisp 
  ;; enabeling this will make fira-code-mode not work.
  (global-prettify-symbols-mode 1)
#+END_SRC

*** LISP Editing

#+name: credmp-lisp-editing
#+begin_src emacs-lisp 
  (use-package paredit
    :diminish paredit-mode
    :config
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    :bind (("C-c d" . paredit-forward-down))
    )

  ;; Ensure paredit is used EVERYWHERE!
  (use-package paredit-everywhere
    :diminish paredit-everywhere-mode
    :config
    (add-hook 'list-mode-hook #'paredit-everywhere-mode))

#+END_SRC

*** Snippets

#+begin_src emacs-lisp  
  (use-package yasnippet
    :diminish yas
    :hook (go-mode . yas-minor-mode)
    :commands yas-minor-mode
    :config
    (yas/global-mode 1)
    (add-to-list 'yas-snippet-dirs (concat init-dir "snippets")))

  (use-package clojure-snippets)
  (use-package java-snippets)
#+END_SRC

*** Auto completion

#+begin_src emacs-lisp  
  (use-package company
    :bind (("C-x /". company-complete))
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode)
    (push 'company-files company-backends)
    )
#+END_SRC

*** Version Control
Magit is the only thing you need when it comes to Version Control (Git)

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-c m" . magit-status))
    :config (setq transient-default-level 5))

  (use-package magit-gitflow
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

  (use-package forge)

  (use-package git-timemachine)

  ;; https://github.com/alphapapa/unpackaged.el#smerge-mode
  ;; Tipped by Mike Z.
  (use-package smerge-mode
    :after hydra
    :config
    (defhydra unpackaged/smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body)))))
#+END_SRC

Display the buffer state in the fringe.


#+begin_src emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter:modified-sign " ") 
    (setq git-gutter:added-sign " ")    
    (setq git-gutter:deleted-sign " "))
#+end_src

*** Neotree

#+begin_src emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

*** REST support

#+begin_src emacs-lisp  
  (use-package restclient
    :ensure t
    :mode (("\\.rest\\'" . restclient-mode)))
  
  (use-package restclient-jq
    :straight
    (restclient-jq :host github
                   :repo "pashky/restclient.el"
                   :build (:not native-compile)
                   :files ("restclient-jq.el"))
    :after restclient)
  
  
  (load (expand-file-name "restclient-jq.el" (file-name-directory (org-find-library-dir "restclient-jq"))))
  
#+END_SRC

Refactor this...

#+begin_src emacs-lisp  
  (use-package ob-restclient
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t)
       (shell . t)
       (ditaa . t)
       (plantuml . t))))
#+end_src

#+begin_src emacs-lisp
  (setq org-plantuml-jar-path (expand-file-name
                               "plantuml.jar"
                               (file-name-as-directory init-dir)))
#+end_src

#+begin_src 
(expand-file-name
             "ditaa.jar"
      (file-name-as-directory
            (expand-file-name
                "scripts"
               (file-name-as-directory
                  (expand-file-name
                      "../contrib"
                     (file-name-directory (org-find-library-dir "org")))))))
#+end_src

*** Highlight keywords

#+begin_src emacs-lisp 
  (use-package hl-todo
    :diminish hl-todo
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold)))
    (add-hook 'prog-mode-hook #'hl-todo-mode))

#+end_src

*** Comment editing

Allow for editing of code comments in the format it is supposed to be edited in. In Rust the code comments support markdown, for instance. ~Separedit~ allows you to edit the comment in that format, much like the ~org-mode~ way of editing source blocks. Just hit ~C-c '~ in a comment block and edit in the supported format. Press ~C-c C-c~ to save the buffer again. 

#+begin_src emacs-lisp
  (use-package separedit
    :custom
    ;; Default major-mode for edit buffer
    ;; can also be other mode e.g. ‘org-mode’.
    (separedit-default-mode 'markdown-mode)
  
    ;; Feature options
    ;; (setq separedit-preserve-string-indentation t)
    ;; (setq separedit-continue-fill-column t)
    ;; (setq separedit-write-file-when-execute-save t)
    ;; (setq separedit-remove-trailing-spaces-in-comment t)
  
    :config
    ;; Key binding for modes you want edit
    ;; or simply bind ‘global-map’ for all.
    (define-key prog-mode-map        (kbd "C-c '") #'separedit)
    )
#+end_src

*** Images

#+begin_src emacs-lisp 
  (setq org-image-actual-width nil)
#+end_src 

*** Flymake

#+begin_src emacs-lisp
  (use-package flymake
    :bind (:map flymake-mode-map
                ("M-n" . flymake-goto-next-error)
                ("M-p" . flymake-goto-prev-error)))
#+end_src
** Clojure                                                        :noexport:

The clojure ecosystem for GNU Emacs consists out of CIDER and bunch of
supporting modules.

*** CIDER

#+name: credmp-clojure
#+begin_src emacs-lisp 
  (use-package cider
;;    :pin melpa-stable

    :config
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'eldoc-mode)
;;    (add-hook 'cider-mode-hook #'cider-hydra-mode)
    (add-hook 'clojure-mode-hook #'paredit-mode)
    (setq cider-repl-use-pretty-printing t)
    (setq cider-repl-display-help-banner nil)
    ;;    (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")

    :bind (("M-r" . cider-namespace-refresh)
           ;;("C-c r" . cider-repl-reset)
           ("C-c ." . cider-reset-test-run-tests))
    )

  (use-package clj-refactor
    :config
    (add-hook 'clojure-mode-hook (lambda ()
                                   (clj-refactor-mode 1)
                                   ;; insert keybinding setup here
                                   ))
    (cljr-add-keybindings-with-prefix "C-c C-m")
    (setq cljr-warn-on-eval nil)
    :bind ("C-c '" . hydra-cljr-help-menu/body)
    )
#+end_src

*** Hydras

Retrieve the Cider-Hydra package from [[https://github.com/clojure-emacs/cider-hydra/blob/master/cider-hydra.el][GitHub]].

#+BEGIN_SRC shell :exports none
  wget https://raw.githubusercontent.com/clojure-emacs/cider-hydra/master/cider-hydra.el
#+END_SRC


#+begin_src emacs-lisp  
;;  (load-library (concat init-dir "cider-hydra.el"))
;;  (require 'cider-hydra)
#+END_SRC

*** Dependency helper

#+begin_src emacs-lisp
(defun prf/cider/send-to-repl (sexp &optional eval ns)
  "Send SEXP to Cider Repl. If EVAL is t, evaluate it.
Optionally, we can change namespace by specifying NS."
  (cider-switch-to-repl-buffer ns)
  (goto-char cider-repl-input-start-mark)
  (delete-region (point) (point-max))
  (save-excursion
    (insert sexp)
    (when (equal (char-before) ?\n)
      (delete-char -1)))
  (when eval
    (cider-repl--send-input t)))

(defun prf/clj/pomegranate-dep (dep)
  "Format a Clojure Pomegranate dependency import for DEP."
  (concat
   (format
    "%s"
    ;; NB: this is clojure!
    `(use '[cemerick.pomegranate :only (add-dependencies)]))
   (s-replace-all
    `(("\\." . ".")
      ("mydep" . ,dep))
    (format
     "%S"
     ;; NB: this is clojure!
     `(add-dependencies :coordinates '[mydep]
                        :repositories (merge cemerick.pomegranate.aether/maven-central
                                             {"clojars" "https://clojars.org/repo"}))))))

(defun prf/cider/inject-pomegranate-dep (&optional dep ns)
  "Auto-import DEP in the current Clojure Repl using Pomegranate.
Optionally, we can change namespace by specifying NS."
  (interactive)
  (setq dep (or dep (read-string "Dep: ")))
  (prf/cider/send-to-repl (prf/clj/pomegranate-dep dep) t ns))
#+end_src
** Web editing

The web-mode is particularly good for editing HTML and Javascript files.

#+name: credmp-package-web
#+begin_src emacs-lisp 
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xhtml?\\'" . web-mode))

    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-markup-indent-offset 4))

    (add-hook 'web-mode-hook  'my-web-mode-hook))

  (use-package less-css-mode)

  (use-package emmet-mode
    :config
    (add-hook 'clojure-mode-hook 'emmet-mode)
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package php-mode
    :hook ((php-mode . (lambda () (set (make-local-variable 'company-backends)
                                  '(
                                    company-files
                                    ))))))
#+end_src

#+begin_src emacs-lisp
(setq nxml-child-indent 4 nxml-attribute-indent 4)
#+end_src
** LSP Mode

#+begin_src emacs-lisp
  ;;(use-package treemacs )
  (use-package lsp-mode
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    :init (setq lsp-keymap-prefix "C-c l")
    :bind (:map lsp-mode-map ("M-RET" . lsp-execute-code-action))
    :custom
    (lsp-headerline-breadcrumb-enable nil) ;; do not display header line
    (lsp-lens-enable t)
    (lsp-lens-auto-enable t)
    (lsp-completion-enable-additional-text-edit t)  ; do not perform additional text edits
    :hook ((java-mode-hook . lsp)
           (rustic-mode-hook . lsp)
           (elm-mode-hook . lsp)
           (lsp-mode-hook . lsp-enable-which-key-integration)
           (lsp-mode-hook . lsp-ui-mode)
           (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  ;; (defun lsp-go-install-save-hooks ()
  ;;   (add-hook 'before-save-hook #'lsp-format-buffer t t)
  ;;   (add-hook 'before-save-hook #'lsp-organize-imports t t))
  ;; (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; (add-hook 'java-mode-hook #'lsp)
#+end_src


** Rust

Modes, connected to eglot, for editing Rust files.

#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :custom
    ;;(rustic-lsp-client 'eglot)
    ;; comment to disable rustfmt on save
    ;;(rustic-format-on-save t)
    (rustic-format-trigger 'on-save)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-inlay-hints-mode t)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-rust-analyzer-experimental-proc-attr-macros nil)
    (rustic-rustfmt-config-alist '((edition . "2018")))
    :config
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))

  (use-package cargo
    :config
    (setq compilation-scroll-output t)
    (add-hook 'rustic-mode-hook 'cargo-minor-mode))

  (use-package flycheck-rust
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    (add-hook 'rustic-mode-hook 'flycheck-mode))
#+end_src


** Java
Additions to support Java code

#+begin_src emacs-lisp 
  (use-package lsp-java
    :custom
    (lsp-java-save-actions-organize-imports t)
    (lsp-java-server-install-dir (concat user-emacs-directory "/eclipse.jdt.ls/server/"))
    :config
    (add-hook 'java-mode-hook 'lsp)
    (setq path-to-lombok "/home/arjen/.m2/repository/org/projectlombok/lombok/1.18.24/lombok-1.18.24.jar")
    (setq lsp-java-vmargs
          `("-noverify"
            "-Xmx1G"
            "-XX:+UseG1GC"
            "-XX:+UseStringDeduplication"
            ;;,(concat "-javaagent:" path-to-lombok)
            ;;,(concat "-Xbootclasspath/a:" path-to-lombok)
            ))
    )

  ;; (require 'lsp-java-boot)

  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  ;;  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-mode nil)
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-show-diagnostics nil)
    (lsp-ui-doc-enable nil)
    (lsp-ui-peek-always-show t))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;;   ;; optionally if you want to use debugger
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (setq dap-java-test-runner (concat user-emacs-directory "/junit-platform-console-standalone-1.9.0-M1.jar"))
    :bind (:map java-mode-map (("C-c l d d" . dap-java-debug-test-method)
                               ("C-c l d r" . dap-java-run-test-method)))
    :hook
    (dap-stopped-hook . (lambda (arg) (call-interactively #'dap-hydra)))
    )
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  (require 'dap-java)
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

Additions to support Java code

#+begin_src emacs-lisp  :tangle no
  (use-package pretty-hydra
    :bind ("<f6>" . toggles-hydra/body))
#+end_src

*** Testcase Generation

#+begin_src emacs-lisp
  (defun java-current-class ()
    "Get the class name for the current file."
    (interactive)
    (unless (eq major-mode 'java-mode)
      (user-error "Not in a java-mode buffer"))
    (unless buffer-file-name
      (user-error "This buffer has no filepath; cannot guess its class name"))
    (or (file-name-sans-extension (file-name-base (buffer-file-name)))
        "ClassName"))
  
  (defun aw/java-package-structure (project-root)
      "Find the current file's package structure. (Partly taken from doom)"
      (unless (eq major-mode 'java-mode)
        (user-error "Not in a java-mode buffer"))
      (let* ((file-path (file-name-sans-extension
                         (file-truename (or buffer-file-name
                                            default-directory))))
             (src-root (cl-loop for root in (list "java/" "test/" "main/" "src/" )
                                if (and (stringp root)
                                        (locate-dominating-file file-path root))
                                return (file-name-directory (file-relative-name file-path (expand-file-name root it)))
                                if (and (integerp root)
                                        (> root 0)
                                        (let* ((parts (split-string (file-relative-name file-path project-root) "/"))
                                               (fixed-parts (reverse (nbutlast (reverse parts) root))))
                                          (when fixed-parts
                                            (string-join fixed-parts "/"))))
                                return it)))
        src-root))
  
  
  (defun aw/open-class (project-root project-component package-structure classname)
    "Generate a ClassNameTest.java in the src/test directory of the project."
    (interactive)
    (let* ((test-file (concat project-root project-component package-structure  classname ".java")))
      (if (file-exists-p test-file)
          (find-file test-file)
        ;; File does not exist, visit and insert template
        (let* ((buffer (find-file test-file))
               (package (string-remove-suffix "."
                                              (replace-regexp-in-string "/" "." package-structure))))
          (switch-to-buffer buffer)
  
          ;; Insert the template
          (insert (concat  "package " package ";")) (newline)
          (newline)
          (insert (concat "class " classname " {")) (newline)
          (newline)
          (insert "}")
  
          (java-mode)
          ))))
  
  (defun aw/switch-between-test-and-iml ()
    "Switch between the test and implementation java files"
    (interactive)
    (let* ((project-root (projectile-project-root))
           (package-structure (aw/java-package-structure project-root))
           (classname (file-name-sans-extension (file-name-base (buffer-file-name))))
           )
      (if (string-suffix-p "Tests" classname)
          (aw/open-class project-root "src/main/java/" package-structure (string-remove-suffix "Tests" classname))
          (aw/open-class project-root "src/test/java/" package-structure (concat classname "Tests"))
          )
      ))
  
  (defun aw/current-java-package ()
    ""
    (interactive)
    (let* ((project-root (projectile-project-root))
           (package-structure (aw/java-package-structure project-root))
           (package (string-remove-suffix "."
                                          (replace-regexp-in-string "/" "." package-structure))))
      package
      )
    )
#+end_src

** NIX

#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src


** PlantUML

#+begin_src emacs-lisp
(use-package plantuml-mode)
#+end_src

** ELM

#+begin_src emacs-lisp
  (use-package elm-mode
    :hook ((elm-mode-hook . elm-format-on-save-mode)))
#+end_src

* Environment

#+begin_src emacs-lisp 
;;  (custom-set-variables '(epg-gpg-program  "/usr/local/MacGPG2/bin/gpg2"))
#+end_src
Setup the various paths that are on the system from which Emacs might need some executable.

#+name: starter-kit-osX-workaround
#+begin_src emacs-lisp 
  (if (or
       (eq system-type 'darwin)
       (eq system-type 'berkeley-unix))
      (setq system-name (car (split-string system-name "\\."))))
  
  (use-package exec-path-from-shell
    :config
    ;;(when (memq window-system '(mac ns x)))
    (exec-path-from-shell-initialize))
#+end_src

** GUI

- Turn off mouse interface early in startup to avoid momentary display.

#+name: credmp-gui
#+begin_src emacs-lisp 
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

- change command to meta, and ignore option to use weird Norwegian
keyboard

#+name: credmp-keys
#+begin_src emacs-lisp 
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)
#+end_src

- Move to trash when deleting stuff and write backup files to own directory

#+name: credmp-trash
#+begin_src emacs-lisp 
  ;; Backup settings
  (defvar --backup-directory (concat init-dir "backups"))

  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))

  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
    (setq delete-by-moving-to-trash t
          trash-directory "~/.Trash/emacs")

    (setq backup-directory-alist `(("." . ,(expand-file-name
                                            (concat init-dir "backups")))))
#+end_src

- Don't open files from the workspace in a new frame

#+name: credmp-trash
#+begin_src emacs-lisp 
  (setq ns-pop-up-frames nil)
#+end_src

[[https://www.emacswiki.org/emacs/InteractiveSpell][Spellchecking in Emacs]]. Hunspell is widely used in text editor and even as the source of the spell check in MacOS X.

Install using the Homebrew project:

#+BEGIN_SRC shell :exports none
  brew install hunspell
  apt-get install hunspell
#+END_SRC

Install dictionaries from the [[https://addons.mozilla.org/en-us/firefox/language-tools/][Mozilla Add-on page]]. On Linux these will be available in your package manager as ~hunspell-nl~.

#+name: credmp-spell
#+begin_src emacs-lisp 
    (defun spell-buffer-dutch ()
      (interactive)
      (ispell-change-dictionary "nederlands")
      (flyspell-buffer))

    (defun spell-buffer-english ()
      (interactive)
      (ispell-change-dictionary "en_US")
      (flyspell-buffer))

    (use-package ispell
      :config
      (when (executable-find "hunspell")
        (setq-default ispell-program-name "hunspell")
        (setq ispell-really-hunspell t))

      ;; (setq ispell-program-name "aspell"
      ;;       ispell-extra-args '("--sug-mode=ultra"))
      :bind (("C-c N" . spell-buffer-dutch)
             ("C-c e" . spell-buffer-english)))
#+end_src

- Find out what face is used, so you can customize it :)

#+name: credmp-spell
#+begin_src emacs-lisp 
  ;;; what-face to determine the face at the current point
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src

- Windows management

#+name: credmp-window
#+begin_src emacs-lisp 
  (use-package ace-window
    :config
    (global-set-key (kbd "C-x o") 'ace-window))

  (use-package ace-jump-mode
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+end_src

The default Emacs =windmove= package allows moving between windows with =S-left= / =S-right= etc. 

#+name: credmp-windmove
#+begin_src emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src

- Misc stuff

#+begin_src emacs-lisp 
  (setq inhibit-startup-message t)
  (global-hl-line-mode t)

  (setq-default indent-tabs-mode nil)

  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'iwb)

  (electric-pair-mode t)

#+end_src

#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src

- Add icons

#+begin_src emacs-lisp  
  (use-package all-the-icons)

  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))

  (use-package all-the-icons-dired
    :hook (dired-mode-hook . all-the-icons-dired-mode))
#+END_SRC

Add line numbers to programming modes.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Sticky buffers

#+begin_src emacs-lisp
  (define-minor-mode sticky-buffer-mode
    "Make the current window always display this buffer."
    nil " sticky" nil
    (set-window-dedicated-p (selected-window) sticky-buffer-mode))
#+end_src
* Look and feel

#+begin_src emacs-lisp
  (use-package doom-themes)
  (use-package doom-modeline
    :config (add-hook 'after-init-hook #'doom-modeline-mode))
#+end_src

The modus themes are WCAG AAA approved, meaning their contrast in colors is excellent for readability. The [[https://protesilaos.com/emacs/modus-themes][documentation]] for it is excellent.

#+begin_src emacs-lisp
  (use-package modus-themes
    ;;:ensure ;; NOTE omit this to use the built-in themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs nil
          modus-themes-bold-constructs nil
          modus-themes-intense-markup t
          modus-themes-diffs 'desaturated
          modus-themes-org-blocks 'gray-background
          modus-themes-region '(bg-only accented)
          modus-themes-paren-match '(bold intense)
          ;; Options for `modus-themes-prompts' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `background', `bold', `gray', `intense', `italic'
          modus-themes-prompts '(intense bold)
          )

    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    ;;:config
    ;; Load the theme of your choice:
    ;;(modus-themes-load-operandi) ;; OR
    ;;(modus-themes-load-vivendi)
    ;;:bind ("<f5>" . modus-themes-toggle)
    )


  (defvar *haba-theme-dark* 'doom-one)
  (defvar *haba-theme-light* 'modus-operandi)
  (defvar *haba-current-theme* *haba-theme-dark*)

  ;; disable other themes before loading new one
  (defadvice load-theme (before theme-dont-propagate activate)
    "Disable theme before loading new one."
    (mapc #'disable-theme custom-enabled-themes))


  (defun haba/next-theme (theme)
    (if (eq theme 'default)
        (disable-theme *haba-current-theme*)
      (progn
        (load-theme theme t)))
    (setq *haba-current-theme* theme))

  (defun haba/toggle-theme ()
    (interactive)
    (cond ((eq *haba-current-theme* *haba-theme-dark*) (haba/next-theme *haba-theme-light*))
          ((eq *haba-current-theme* *haba-theme-light*) (haba/next-theme *haba-theme-dark*))
          ;;((eq *haba-current-theme* 'default) (haba/next-theme *haba-theme-dark*))
          ))

  (global-set-key [f5] 'haba/toggle-theme)

  (load-theme *haba-current-theme* t)
#+end_src

Set the default font to iosevka 14, increase using ~live-coding~.

Download the fonts from:

- iosevka :: [[https://github.com/be5invis/Iosevka][github]]

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka-14")
#+end_src


I switch between doom-one and the modus themes quite a lot. Currently I am on a modus-themes binge.

#+begin_src emacs-lisp :tangle no
  (use-package doom-themes

    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; load theme here
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)


    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

#+begin_src emacs-lisp
  ;;  (use-package command-log-mode)

    (defun live-coding ()
      (interactive)
      (set-face-attribute 'default nil :font "iosevka-20")
    ;;  (add-hook 'prog-mode-hook 'command-log-mode)
      )

    (defun normal-coding ()
      (interactive)
      (set-face-attribute 'default nil :font "iosevka-14")
     ;; (add-hook 'prog-mode-hook 'command-log-mode)
      )
#+END_SRC

#+begin_src emacs-lisp  
   (eval-after-load "org-indent" '(diminish 'org-indent-mode))
#+END_SRC

Now, lets make sure we are not `ding`-ed all the time.

#+begin_src emacs-lisp  
  ;; http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document
  (defun my-bell-function ())

  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)
#+END_SRC

** Ligatures

#+begin_src emacs-lisp :tangle no
  (use-package fira-code-mode
    :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
    :hook (prog-mode-hook org-mode)) ;; Enables fira-code-mode automatically for programming major modes
#+end_src
* General Editing

#+begin_src emacs-lisp
  (use-package emojify
    :config
    (setq emojify-styles
          (delq
           nil (list  'ascii 'github 'unicode)))
    (emojify-set-emoji-styles emojify-styles)
    (global-emojify-mode))

  (use-package company-emoji
    :config
    (add-to-list 'company-backends 'company-emoji))
#+end_src
** Dired

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind ("C-x C-j" . dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config (setq counsel-dired-listing-switches "-agho --group-directories-first")
    )


#+end_src
* Org Mode

Formatting found on [[http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Howardism]]. Also [[https://diego.codes/][Diego]] has some great stuff for
blogging/making a website using Emacs.

** The org package

Some really good reads on org-mode:

- [[https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/][Org-Mode features you did not know about]]

#+begin_src emacs-lisp 
  ;;(use-package org)
  
  (setq org-catch-invisible-edits 'show-and-error)
  (add-hook 'org-mode-hook 'org-indent-mode)
  
  (require 'cl)
#+end_src

** Customization

#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

** Habits

#+begin_src emacs-lisp 
  (require 'org-habit)

  (add-to-list 'org-modules 'org-habit)
#+end_src

** Editing Org files

# #+begin_src  emacs-lisp
#   (use-package org-appear
#     :straight (org-appear :type git :host github :repo "awth13/org-appear")
#     :hook
#     (org-mode-hook  . org-appear-mode))
# #+end_src

#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (setq org-bullets-bullet-list '("❯" "❯❯" "❯❯❯" "❯❯❯❯" "❯❯❯❯❯"))

    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; (use-package org-bullets
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-hide-emphasis-markers t)

  ;; (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))
  ;; (setq org-ellipsis " ➟ ")

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))


  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (setq org-link-frame-setup
        (quote
         ((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file)
          (wl . wl-other-frame))))

  ;; From http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html
  (when (window-system)
  ;; (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;;                                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                                ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;          (base-font-color     (face-foreground 'default nil 'default))
  ;;          (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;     (custom-theme-set-faces 'user
  ;;                             `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;                             `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;                             `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;                             `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;                             `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;                             `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;                             `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;;                             `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;;                             `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
    )

#+end_src

#+begin_src emacs-lisp
  (add-hook
   'org-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

** Bibliography

#+begin_src emacs-lisp
  (use-package citar
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :custom
    (citar-file-note-org-include '(org-id org-roam-ref))
    (citar-bibliography '("/home/arjen/stack/Studie/Open-Universiteit/My-Library.bib"))
    )
#+end_src

#+begin_src emacs-lisp
  ;; (use-package company-bibtex
  ;;   :config
  ;;   (add-to-list 'company-backends 'company-bibtex)
  ;;   :custom
  ;;   (company-bibtex-bibliography '("/home/arjen/stack/Studie/Open-Universiteit/My-Library.bib"))
  ;;   )
#+end_src

#+begin_src emacs-lisp
  (use-package org-ref
      :config
      (setq
           ;; org-ref-completion-library 'org-ref-ivy-cite
           ;; org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
           org-ref-default-bibliography "~/stack/Studie/Open-Universiteit/My-Library.bib"
           org-ref-bibliography-notes "~/stack/Notebook/biblio-notes.org"
           org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
           ;;org-ref-notes-directory "/home/haozeke/Git/Gitlab/Mine/Notes/"
           org-ref-notes-function 'orb-edit-notes
      ))

  (setq bibtex-completion-bibliography '("~/My-Library.bib")
        ;; bibtex-completion-library-path '("~/stack/Zotero/storage/")
        ;; bibtex-completion-notes-path "~/stack/roam/papers/"
        ;; bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

        ;; bibtex-completion-additional-search-fields '(keywords)
        ;; bibtex-completion-display-formats
        ;; '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
        ;;   (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
        ;;   (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        ;;   (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        ;;   (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
        ;; bibtex-completion-pdf-open-function (lambda (fpath)
        ;;                                       (call-process "open" nil 0 nil fpath))
        )

          ;; ;; (use-package org-ref :straight (org-ref
          ;; ;;                         :build (:not native-compile)))

          ;; (require 'org-ref-refproc)

          ;; (setq org-latex-prefer-user-labels t)

          ;; (add-hook 'org-export-before-parsing-hook 'org-ref-glossary-before-parsing)
          ;; (add-hook 'org-export-before-parsing-hook 'org-ref-acronyms-before-parsing)
          ;; (add-hook 'org-export-before-parsing-hook 'org-ref-refproc)
          ;; (add-hook 'org-export-before-parsing-hook 'org-ref-csl-preprocess-buffer)
          ;; (add-hook 'org-export-before-parsing-hook 'org-ref-cite-natmove) ;; do this first

          ;; ;; (setq org-export-before-parsing-hook nil)
          ;; (define-key org-mode-map (kbd "C-c i l") 'org-ref-insert-link-hydra/body)

#+end_src

Due to native comp seeing it as dead code?

#+begin_src emacs-lisp
  ;; (defun org-ref-find-bibliography ()
  ;;   "Find the bibliography in the buffer.
  ;; This function sets and returns a list of files either from internal bibliographies, from files in the
  ;; BIBINPUTS env var, and finally falling back to what the user has
  ;; set in `bibtex-completion-bibliography'"
  ;;   (let ((org-ref-bibliography-files ()))
  ;;     (catch 'result
  ;;       (save-excursion
  ;; 	(org-with-wide-buffer
  ;;          (goto-char (point-min))
  ;; 	 ;; This just searches for these strings, and then checks if it
  ;; 	 ;; is on a link. This is faster than parsing the org-file when
  ;; 	 ;; it gets large.
  ;;          ;; look for org-ref bibliography
  ;;          (while (re-search-forward "\\(no\\)?bibliography:" nil t)
  ;; 	   (let ((link (org-element-context)))
  ;; 	     (when (and (eq (car link) 'link)
  ;; 			(member (org-element-property :type link) '("bibliography" "nobibliography")))
  ;; 	       (setq org-ref-bibliography-files
  ;; 		     (mapcar 'org-ref-get-bibfile-path
  ;; 			     (mapcar 'string-trim (split-string
  ;; 						   (org-element-property :path link)
  ;; 						   ","))))
  ;; 	       (throw 'result (nreverse (delete-dups org-ref-bibliography-files))))))

  ;;          (goto-char (point-min))
  ;;          (while (re-search-forward "\\\\addbibresource{\\(.*\\)}" nil t)
  ;;            (push (match-string 1) org-ref-bibliography-files))

  ;;          (when org-ref-bibliography-files
  ;;            (throw 'result (nreverse (delete-dups (mapcar 'org-ref-get-bibfile-path org-ref-bibliography-files)))))

  ;;          ;; we did not find anything. use defaults. Make sure we have a list in
  ;;          ;; case it is a single string. 
  ;; 	 (throw 'result (if (listp bibtex-completion-bibliography)
  ;; 			    bibtex-completion-bibliography
  ;; 			  (list bibtex-completion-bibliography))))))))


#+end_src
** Agenda and capture templates

#+begin_src emacs-lisp
  ;; Move to PRIVATE?
  (setq org-agenda-files '("~/stack/Notebook"))
  (setq org-log-into-drawer t)
  (setq org-capture-templates '(("b" "Blog idea" entry (file+olp "~/stack/Notebook/notes.org" "Personal" "Series")
                                 "* %?\n%T" :prepend t)
                                ("t" "todo" entry
                                 (file+headline "~/stack/Notebook/inbox.org" "Tasks")
                                 "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
                                ("T" "Tickler" entry
                                 (file+headline "~/stack/Notebook/tickler.org" "Tickler")
                                 "* %i%? \n %U")
                                ("wN" "Web link" entry
                                 (file+headline ,(car org-agenda-files)
                                                "Links to read later")
                                 "* TODO [#A]  %?%a \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"Fri\"))\n"
                                 :immediate-finish t :empty-lines 1)
                                ("e" "email" entry (file+headline "~/stack/Notebook/inbox.org" "Tasks from Email")
                                 "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))

  (add-to-list
   'org-capture-templates
   `("wN" "Web link" entry (file+headline ,(car org-agenda-files) "Links to read later")
     "* TODO [#A] %?%a \nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"Fri\"))\n"
     :immediate-finish nil :empty-lines 1))


  (setq org-refile-targets '(("~/stack/Notebook/notes.org" :level . 2)
                             ("~/stack/Notebook/tickler.org" :maxlevel . 2)
                             ("~/stack/Notebook/someday.org" :maxlevel . 1)))

  (setq org-agenda-custom-commands
        '(
          ("h" "Daily habits" 
           ((agenda ""))
           ((org-agenda-show-log t)
            (org-agenda-ndays 7)
            (org-agenda-log-mode-items '(state))
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":daily:"))))
          ;; other commands here
          ))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+end_src

** Keybindings

#+begin_src emacs-lisp 
  (global-set-key "\C-cf" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  ;;(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

** Publishing

*** General Org-mode packages

#+begin_src emacs-lisp  
;;  (package-install 'org-plus-contrib)
#+END_SRC

*** Packages

#+begin_src emacs-lisp 
    ;; (require 'ox-html)
    ;; (require 'ox-publish)

    ;; (add-to-list 'load-path (expand-file-name (concat init-dir "ox-rss")))
    ;; (require 'ox-rss)
  (require 'org-tempo)
#+end_src


*** Variables

#+begin_src emacs-lisp 
  ;; (setq org-mode-websrc-directory "~/Dropbox/Apps/MobileOrg/website")
  ;; (setq org-mode-publishing-directory "~/Dropbox/Apps/MobileOrg/website/_site")

  ;; (setq org-html-htmlize-output-type 'css)
#+end_src

*** Support functions

#+begin_src emacs-lisp 
  ;; (defun my-org-export-format-drawer (name content)
  ;;   (concat "<div class=\"drawer " (downcase name) "\">\n"
  ;;           "<h6>" (capitalize name) "</h6>\n"
  ;;           content
  ;;           "\n</div>"))
  ;; (setq org-html-format-drawer-function 'my-org-export-format-drawer)

  ;; (defun org-mode-blog-preamble (options)
  ;;   "The function that creates the preamble top section for the blog.
  ;;             OPTIONS contains the property list from the org-mode export."
  ;;   (let ((base-directory (plist-get options :base-directory)))
  ;;     (org-babel-with-temp-filebuffer (expand-file-name "top-bar.html" base-directory) (buffer-string))))

  ;; (defun org-mode-blog-postamble (options)
  ;;   "The function that creates the postamble, or bottom section for the blog.
  ;;             OPTIONS contains the property list from the org-mode export."
  ;;   (let ((base-directory (plist-get options :base-directory)))
  ;;     (org-babel-with-temp-filebuffer (expand-file-name "bottom.html" base-directory) (buffer-string))))

  ;; (defun org-mode-blog-prepare (options)
  ;;   "`index.org' should always be exported so touch the file before publishing."
  ;;   (let* (
  ;;          (buffer (find-file-noselect (expand-file-name "index.org" org-mode-websrc-directory) t)))
  ;;     (with-current-buffer buffer
  ;;       (set-buffer-modified-p t)
  ;;       (save-buffer 0))
  ;;     (kill-buffer buffer)))
#+end_src

*** Publishing configuration

#+begin_src emacs-lisp 
  ;; ;; Options: http://orgmode.org/manual/Publishing-options.html
  ;; (setq org-publish-project-alist
  ;;       `(("all"
  ;;          :components ("site-content" "site-rss" "site-static"))

  ;;         ("site-content"
  ;;          :base-directory ,org-mode-websrc-directory
  ;;          :base-extension "org"
  ;;          :publishing-directory ,org-mode-publishing-directory
  ;;          :recursive t
  ;;          :publishing-function org-html-publish-to-html
  ;;          :preparation-function org-mode-blog-prepare

  ;;          :html-head "<link rel=\"stylesheet\" href=\"/css/style.css\" type=\"text/css\" />
  ;; <link rel=\"stylesheet\" href=\"/css/all.min.css\" type=\"text/css\" />"

  ;;          :headline-levels      4
  ;;          :auto-preamble        t
  ;;          :auto-postamble       nil
  ;;          :auto-sitemap         t
  ;;          :sitemap-title        "Build Fun Things"
  ;;          :section-numbers      nil
  ;;          :table-of-contents    t
  ;;          :with-toc             nil
  ;;          :with-author          nil
  ;;          :with-creator         nil
  ;;          :with-tags            nil
  ;;          :with-smart-quotes    nil

  ;;          :html-doctype         "html5"
  ;;          :html-html5-fancy     t
  ;;          :html-preamble        org-mode-blog-preamble
  ;;          :html-postamble       org-mode-blog-postamble

  ;;          :html-head-include-default-style nil
  ;;          :html-head-include-scripts nil
  ;;          )

  ;;         ("site-rss"
  ;;          :base-directory ,org-mode-websrc-directory
  ;;          :base-extension "org"
  ;;          :publishing-directory ,org-mode-publishing-directory
  ;;          :recursive t
  ;;          :publishing-function (org-rss-publish-to-rss)
  ;;          :html-link-home "https://www.buildfunthings.com"
  ;;          :html-link-use-abs-url t
  ;;          :exclude ".*"
  ;;          :include ("feed.org")
  ;;          )
  ;;         ("site-static"
  ;;          :base-directory       ,org-mode-websrc-directory
  ;;          :base-extension       "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|ttf\\|woff\\|woff2\\|ico\\|webmanifest"
  ;;          :publishing-directory ,org-mode-publishing-directory
  ;;          :exclude "_site"
  ;;          :recursive            t
  ;;          :publishing-function  org-publish-attachment
  ;;          )
  ;;         ))
#+end_src

*** org-reveal

ox-reveal is broken in org 9.2 due to the template mechanism change.

#+begin_src emacs-lisp 
  ;;   (use-package ox-reveal

  ;;     ;; :config
  ;;     ;; (setq org-reveal-root "file:///home/arjen/Documents/BuildFunThings/Security/reveal.js-3.5.0/js/reveal.js")
  ;; )
  ;; (add-to-list 'load-path "/home/arjen/.emacs.d/org-reveal")

  ;; (require 'ox-reveal)

#+end_src

** Agenda

#+begin_src emacs-lisp
(use-package org-super-agenda
:commands (org-super-agenda-mode))
#+end_src

#+begin_src emacs-lisp
(customize-set-value
    'org-agenda-category-icon-alist
    `(
    ("daily" ,(list (all-the-icons-faicon "circle-o-notch")) nil nil :ascent center)
    ("work" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center)
    ("habit" ,(list (all-the-icons-faicon "circle-o-notch")) nil nil :ascent center)
    ("study" ,(list (all-the-icons-faicon "university")) nil nil :ascent center)
    ("notes" ,(list (all-the-icons-faicon "clipboard")) nil nil :ascent center)
    ))
#+end_src

** Screenshots

#+begin_src emacs-lisp
(use-package org-attach-screenshot
:config
  (setq org-attach-screenshot-dirfunction
                (lambda ()
                  (progn (assert (buffer-file-name))
                         (concat (file-name-sans-extension (buffer-file-name))
                                 "_att"))))
  (setq org-attach-screenshot-command-line (expand-file-name "~/.local/bin/aw-screenshot.sh %f"))
  )
#+end_src

** Additional languages
*** Latex Preview

#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
#+end_src

https://www.reddit.com/r/emacs/comments/3zcr43/nooborgmode_custom_latexpdf_export_custom_style/
#+begin_src emacs-lisp
  ;;     (add-to-list 'org-latex-classes
  ;;                  '("arjen"
  ;;                    "\\documentclass[11pt,a4paper]{arjen}
  ;;   \\usepackage[utf8]{inputenc}
  ;;   \\usepackage[T1]{fontenc}
  ;;   \\usepackage{fixltx2e}
  ;;   \\usepackage{graphicx}
  ;;   \\usepackage{longtable}
  ;;   \\usepackage{float}
  ;;   \\usepackage{wrapfig}
  ;;   \\usepackage{rotating}
  ;;   \\usepackage[normalem]{ulem}
  ;;   \\usepackage{amsmath}
  ;;   \\usepackage{textcomp}
  ;;   \\usepackage{marvosym}
  ;;   \\usepackage{wasysym}
  ;;   \\usepackage{amssymb}
  ;;   \\usepackage{hyperref}
  ;;   \\usepackage{mathpazo}
  ;;   \\usepackage{color}
  ;;   \\usepackage{enumerate}
  ;;   \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  ;;   \\tolerance=1000
  ;;         [NO-DEFAULT-PACKAGES]
  ;;         [PACKAGES]
  ;;         [EXTRA]
  ;;   \\linespread{1.1}
  ;;   \\hypersetup{pdfborder=0 0 0}
  ;;     "
  ;;                      ("\\chapter{%s}" . "\\chapter*{%s}")
  ;;                      ("\\section{%s}" . "\\section*{%s}")
  ;;                      ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;; ))
#+end_src
*** dot

#+begin_src emacs-lisp
(org-babel-do-load-languages
    'org-babel-load-languages
    '((dot . t)))
#+end_src

#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src
*** Company Org Block

#+begin_src emacs-lisp
  ;; (use-package company-org-block)
#+end_src

*** Org Tempo addition

#+begin_src emacs-lisp
  (dolist (thing '( ("bt" . "tip")
                     ("bn" . "note")
                     ("bw" . "warning")
                     ("bc" . "caution")
                     ("bi" . "important")
                     ))
    (add-to-list 'org-structure-template-alist thing))
#+end_src
** Custom functions

#+begin_src emacs-lisp
(defun ar/org-insert-link-dwim ()
  "Like `org-insert-link' but with personal dwim preferences."
  (interactive)
  (let* ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (when (string-match-p "^http" (current-kill 0))
                          (current-kill 0)))
         (region-content (when (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (cond ((and region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((and clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string "title: "
                                 (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))
#+end_src
** Transclusion

#+begin_src emacs-lisp
(use-package org-transclusion)
#+end_src
** org-modern                                                      :noexport:
Some experiments from the [[https://github.com/minad/org-modern][org-modern]] package.

#+begin_src emacs-lisp
  ;; (use-package org-modern
  ;;   :custom
  ;;   (
  ;;    ;; Edit settings
  ;;    org-auto-align-tags nil
  ;;    org-tags-column 0
  ;;    org-catch-invisible-edits 'show-and-error
  ;;    org-special-ctrl-a/e t
  ;;    org-insert-heading-respect-content t

  ;;    ;; Org styling, hide markup etc.
  ;;    org-hide-emphasis-markers t
  ;;    org-pretty-entities t
  ;;    org-ellipsis "…"

  ;;    ;; Agenda styling
  ;;    org-agenda-block-separator ?─
  ;;    org-agenda-time-grid
  ;;    '((daily today require-timed)
  ;;      (800 1000 1200 1400 1600 1800 2000)
  ;;      " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  ;;    org-agenda-current-time-string
  ;;    "⭠ now ─────────────────────────────────────────────────")
  ;;   :config
  ;;   ;; Enable org-modern-mode
  ;;   (add-hook 'org-mode-hook #'org-modern-mode)
  ;;   (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src

* Org-Roam

#+begin_src emacs-lisp
  (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory (file-truename "~/stack/roam/"))
        (org-roam-complete-everywhere t)
        :bind (("C-c r l" . org-roam-buffer-toggle)
               ("C-c r f" . org-roam-node-find)
               ("C-c r g" . org-roam-graph)
               ("C-c r i" . org-roam-node-insert)
               ("C-c r c" . org-roam-capture)
               ;; Dailies
               ("C-c r j" . org-roam-dailies-capture-today))
        :config
        (org-roam-setup)
        ;; If using org-roam-protocol
        (require 'org-roam-protocol)

        (cl-defmethod org-roam-node-type ((node org-roam-node))
          "Return the TYPE of NODE."
          (condition-case nil
              (file-name-nondirectory
               (directory-file-name
                (file-name-directory
                 (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))

        )


#+end_src

Taken from https://jethrokuan.github.io/org-roam-guide/

#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("m" "main" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("p" "papers" plain "%?"
           :if-new
           (file+head "papers/${title}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("h" "htb" plain "%?"
           :if-new
           (file+head "machines/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
           :immediate-finish t
           :unnarrowed t)
          ("n" "nakijken" plain "%?"
           :if-new
           (file+head "nakijken/${title}.org" "#+title: ${title}\n#+filetags: :nakijken:\n")
           :immediate-finish t
           :unnarrowed t)
          ("s" "Slipbox" entry  (file "braindump/org/inbox.org")
           "* %?\n")))
#+end_src

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
(setq org-roam-node-display-template
      (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

#+begin_src emacs-lisp
(defun jethro/org-capture-slipbox ()
  (interactive)
  (org-capture nil "s"))
#+end_src


#+begin_src emacs-lisp
(defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("p" "papers" plain "%?" :if-new
                            (file+head "papers/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))
#+end_src

#+begin_src emacs-lisp
(defun jethro/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
#+end_src
** Timestamps

#+begin_src emacs-lisp
  (use-package org-roam-timestamps
    :straight (org-roam-timestamps :type git :host github :repo "ThomasFKJorna/org-roam-timestamps")
    :after org-roam
    :config (org-roam-timestamps-mode))
#+end_src

** Deft (outdated)                                                :noexport:
I no longer use deft to search the packages.

#+begin_src emacs-lisp :tangle no
  (use-package deft                       ;
    :straight (deft :type git :host github :repo "jrblevin/deft"
                :fork (:host github :repo "credmp/deft"))
    :after org
    :bind
    ("C-c r d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/stack/roam/" ))
#+end_src

** Journaling

#+begin_src emacs-lisp
  (use-package org-journal
    :bind
    ("C-c r j" . org-journal-new-entry)
    :custom
    (org-journal-date-prefix "#+title: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-dir "~/stack/roam/")
    (org-journal-date-format "%A, %d %B %Y")
    (org-journal-enable-agenda-integration t)
  )
#+end_src


** Bibliography support

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (setq org-roam-bibtex-preformat-keywords
     '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

  - tags ::
  - keywords :: ${keywords}

  \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

             :unnarrowed t))))
#+end_src

#+begin_src emacs-lisp
  (use-package bibtex-completion
    :config
    (setq bibtex-completion-bibliography "~/stack/Studie/Open-Universiteit/My-Library.bib")
    (setq bibtex-completion-pdf-field "file")
    )
#+end_src

* Document review

#+begin_src emacs-lisp
(use-package nov)
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package org-noter
    :after org-noter-pdftools
    :config
    (require 'org-noter-pdftools)
    (setq org-noter-auto-save-last-location t))
#+end_src

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq pdf-view-resize-factor 1.1)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src

#+begin_src emacs-lisp
  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freestyle-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))
#+end_src

* RSS Feed Reading                                                 :noexport:

#+begin_src emacs-lisp
    (use-package elfeed)
    (use-package elfeed-org
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
      )

    (use-package elfeed-goodies
      :config
      (setq elfeed-goodies/entry-pane-position 'bottom)
      (elfeed-goodies/setup))
#+end_src

* Education                                                        :noexport:

#+begin_src emacs-lisp
(use-package anki-editor)
#+end_src

* Personal config

My personal details are stored in a separate, private,
repository. This repository holds a single ~org~ file that will be read
using ~org-babel~.

You can either add your personal information in this file, indicated
in the sections with ~PRIVATE~, or use the skeleton private file in [[./skeleton-personal.org][this file]]. Be sure to include your version of the skeleton file below.

#+begin_src emacs-lisp
  ;; Load my personal information
  (org-babel-load-file
   (expand-file-name
    "personal-emacs-config/personal.org" init-dir))
#+end_src


* Advent of Code

#+begin_src emacs-lisp
  (defun aw/aoc-get-puzzle-and-input (prefix)
    "Retrieve the input for an advent of code puzzle. Use a prefix
  to retrieve for a specific year or day. The input is inserted into the current
  buffer, a new buffer will be made with the description of the puzzle."
    (interactive "p")
    (let* ((year  (cond ((= prefix 1)
                         (string-to-number (format-time-string "%Y")))
                        ((> prefix 1)
                         (read-number "Year: "))))
           (day (cond ((= prefix 1)
                       (string-to-number (format-time-string "%d")))
                      ((> prefix 1)
                       (read-number "Day: "))))
           (creds (auth-source-search :host "adventofcode.com"))
           (secret (plist-get (car creds) :secret))
           (decoded (funcall secret))
           (url-request-extra-headers `(("Cookie" . ,(concat "session=" decoded)))))
      (url-insert-file-contents (format "https://adventofcode.com/%d/day/%d/input" year day))
      (with-output-to-temp-buffer "aoc-puzzle"
          (pop-to-buffer "aoc-puzzle")
          (url-insert-file-contents (format "https://adventofcode.com/%d/day/%d" year day))
          (shr-render-region (point-min) (point-max)))
      ))
#+end_src

#+begin_src emacs-lisp
  (defun aw/aoc-update-puzzle (prefix)
    "Retrieve the input for an advent of code puzzle. Use a prefix
  to retrieve for a specific year or day. The input is inserted into the current
  buffer, a new buffer will be made with the description of the puzzle."
    (interactive "p")
    (let* ((year  (cond ((= prefix 1)
                         (string-to-number (format-time-string "%Y")))
                        ((> prefix 1)
                         (read-number "Year: "))))
           (day (cond ((= prefix 1)
                       (string-to-number (format-time-string "%d")))
                      ((> prefix 1)
                       (read-number "Day: "))))
           (creds (auth-source-search :host "adventofcode.com"))
           (secret (plist-get (car creds) :secret))
           (decoded (funcall secret))
           (url-request-extra-headers `(("Cookie" . ,(concat "session=" decoded)))))
      (with-output-to-temp-buffer "aoc-puzzle"
          (pop-to-buffer "aoc-puzzle")
          (url-insert-file-contents (format "https://adventofcode.com/%d/day/%d" year day))
          (goto-char 1)
          (shr-render-region (point-min) (point-max))
          )
      ))
#+end_src

* Experiment

** eshell

#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
  
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  
    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)
  
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))
  
  (use-package eshell-git-prompt)
  
  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
  
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
  
    (eshell-git-prompt-use-theme 'powerline))
  
#+end_src

** vterm

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

** Native Comp

#+begin_src emacs-lisp
;;(setq warning-suppress-types '((lsp-mode) (comp) (comp) (:warning)))
#+end_src


** Popper

#+begin_src emacs-lisp
    (use-package popper
      :custom
      (popper-group-function #'popper-group-by-projectile)
      :bind (("C-!"   . popper-toggle-latest)
             ("M-!"   . popper-cycle)
             ("C-M-!" . popper-toggle-type)
             )
      :init
      (setq popper-reference-buffers
            '("\\*Messages\\*"
              "Output\\*$"
              "vterm .+\\*$"
              help-mode
              helpful-mode
              eshell-mode
              vterm-mode
              compilation-mode))
      (popper-mode +1)
      (popper-echo-mode +1))
#+end_src

** Window resizing

#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

** Ascii Table
#+begin_src emacs-lisp
  (defun ascii-table ()
    "Display basic ASCII table (0 thru 128)."
    (interactive)
    (switch-to-buffer "*ASCII*")
    (erase-buffer)
    (setq buffer-read-only nil)        ;; Not need to edit the content, just read mode (added)
    (local-set-key "q" 'bury-buffer)   ;; Nice to have the option to bury the buffer (added)
    (save-excursion (let ((i -1))
      (insert "ASCII characters 0 thru 127.\n\n")
      (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
      (while (< i 31)
        (insert (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
                        (setq i (+ 1  i)) i (single-key-description i)
                        (setq i (+ 32 i)) i (single-key-description i)
                        (setq i (+ 32 i)) i (single-key-description i)
                        (setq i (+ 32 i)) i (single-key-description i)))
        (setq i (- i 96))))))
#+end_src

** Time keeping

#+begin_src emacs-lisp
  (use-package chronos)

#+end_src

