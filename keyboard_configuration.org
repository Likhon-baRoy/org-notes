#+TITLE: Basic Needs for Configurations

* Tasks
** DONE Start new org file for tutorial
CLOSED: [2022-09-27 Tue 2:16pm]
* ORG-MODE Usage
- And you can choose your desired one from the generated list.

#+begin_example org
*bold* /italic/ _underline_ +strike-through+ =verbatim= ~code~ _/*combine*/_ *_~inner-most~_* =_literally_= [[link-here][description-here]]
#+end_example

# Comments
Org mode has a variety of ways to add comments.
    Line comments start with #.
    Inline comments wrap @@comment:like so@@.
    Block comments are wrapped with #+BEGIN_COMMENT and #+END_COMMENT.
    Section comments can be created by adding the COMMENT keyword to a heading * COMMENT like so

** TODO : keyboard configuration
*** TODO : key-map of keyboard
- ~xmodmap~ is a program. Through this program you can change your key-map.
  Here's an example of changing *Esc*, *Caps_Lock* and *Control_L*

      #+begin_src sh
        keycode 9 = Escape
        keycode 37 = Escape
        keycode 66 = Control_L
        clear Lock
        add Control = Control_L
      #+end_src

- On Unix-like systems, I have a ~~/.xmodmap~ file:

  #+begin_example
!
! Swap Caps_Lock and Control_L
!
remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Caps_Lock
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
  #+end_example

- Now save this file by the name ~.xmodmap~ in your home(~) directory and Run: =xmodmap .xmodmap= in your terminal. And you're all set to go.

*** TODO : change keyboard-layout based on language
- there are many command to do this kind of jobs.
  among them most populer are =setxkbmap= AND =localectl=

- This one's for ~Probhat~ layout
#+BEGIN_SRC sh
localectl set-x11-keymap us,bd '' ,probhat grp:lctrl_lwin_toggle
#+END_SRC

- This one's for ~Jatiyo~ layout
#+BEGIN_SRC sh
localectl set-x11-keymap us,bd "" , grp:alt_space_toggle
#+END_SRC
*** For checking the available keystrokes for switching keyboard layouts
- Different computer has differnt types of keybindings based on their configuration
  So, to check your one run this command:
#+BEGIN_SRC sh
localectl list-x11-keymap-options
#+END_SRC

* A top level heading
** COMMENT This section and subsections are commented out
*** This heading inherits the =COMMENT= keyword
This text is commented out

* What are you staring at?

#+BEGIN_SRC emacs-lisp
(require 'loadhist)
(file-dependents (feature-file 'cl))
#+END_SRC

#+RESULTS:
| /home/raxit/.emacs.d/elpa/emmet-mode-20210820.1124/emmet-mode.elc |

* Typing Bangla in emacs

link here : [[https://md-arif-shaikh.github.io/2021/05/27/typing-bangla-in-emacs.html][click]]

May 27, 2021
Select an input method

Most of us emacsians who live inside emacs love to do everything within
emacs. If you are a Bangali then you are already familiar with the famous Avro
phonetic for typing Bangla on your computer. You can use it with emacs also
(with some conflicts of keybindings) but you don't have to. There is an in-built
method input-method which enables entering text in non-English languages. In any
buffer, you can use M-x toggle-input-method (bound to C-\) and select an
input-method. You can look at all the available method using M-x
list-input-methods For bangla I use bengali-itrans. If you are happy with an
input-method, you can make it the default input-method you want to toggle to by
using the following in your settings.

#+BEGIN_SRC emacs-lisp
(setq default-input-method "bengali-itrans")
(set-fontset-font "fontset-default" 'bengali (font-spec :family "Kalpurush" :size 18))

(use-package company-wordfreq :straight t)
#+END_SRC

additionally you may want to use a nice font for Bangla text. For example to use
kalpurush font (download from here) use the following Getting suggestions for
words (autocompletion)

Now, one of the best features of Avro phonetic is that as you type it suggests
you possible words. In emacs this is possible using the package company for
autocompletion. company needs a backend that would feed it the data to use for
autocompletion. There exists such a backend called company-wordfreq (see the
source page here).

We need to set up few things to use company-wordfreq. First, let's install the
package using use-package and straight (or whatever other method you prefer).

Behind the scene, the emacs input-method uses quail package. It has its own
auto-completion but it's not about suggesting words but rather few strings
associated with the current keystroke. Ideally, we only want the
English-to-Bangla transformation for any keystroke and then use the company for
getting suggestions based on the current Bangla string at the point. Therefore
we first turn off the quail-completion and make return only the current one
using quail-select-current. For this, we want to override the quail-completion
using the following

#+BEGIN_SRC emacs-lisp
(defun remove-quail-completion ()
    (quail-select-current))
(advice-add 'quail-completion :override #'remove-quail-completion)
#+END_SRC

We also don't want the echo in the buffer from qual, so we do the following

#+BEGIN_SRC emacs-lisp
(defun remove-quail-show-guidance ()
  nil)
(advice-add 'quail-show-guidance :override #'remove-quail-show-guidance)
#+END_SRC

We then set the local dictionary for ispell-local-dictionary. You can download the dictionary for available languages using M-x company-wordfreq-download-list and choosing the language. The dictionary is downloaded in the ~/.emacs.d/wordfreq-dicts as <languag-name>.txt. Then set the ispell-local-dictionary using

#+BEGIN_SRC emacs-lisp
(setq ispell-local-dictionary "bengali")
#+END_SRC

where the language name is bengali. You can also download the dictionary from any other source and put it in that directory. Here is a repo containing Bangla dictionary.

Lastly, we need to set the following for the current buffer

#+BEGIN_SRC emacs-lisp
(setq-local company-backends '(company-wordfreq))
(setq-local company-transformers nil)
#+END_SRC

We can put all these inside an interactive function and call it using M-x.

#+BEGIN_SRC emacs-lisp
(defun remove-quail-show-guidance ()
  nil)
(defun remove-quail-completion ()
  (quail-select-current))
(defun bn-company-wordfreq ()
  (interactive)
  (advice-add 'quail-show-guidance :override #'remove-quail-show-guidance)
  (advice-add 'quail-completion :override #'remove-quail-completion)
  (setq ispell-local-dictionary "bengali")
  (setq-local company-backends '(company-wordfreq))
  (setq-local company-transformers nil))
#+end_src

** Workflow
- Change the input-method using C-\
- Enable company-wordfreq and other changes for a nice experience using =M-x bn-company-wordfreq=
- =TAB= to get suggestions.
- =ARROW= -> to select one.

* All the icons
This installs a bunch of icons and fonts - no more blank squares anywhere.
** TODO
- Lets add a package. A good one to start with is all-the-icons. This installs a bunch of icons and fonts - no more blank squares anywhere.  Add the following:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+end_src

-With your cursor at the end of the line, smash that =C-x C-e= and Emacs will
install the package. It works because we have /(setq use-package-always-ensure t)/
set. This particular package has a one-time setup step - go ahead and execute
=M-x all-the-icons-install-fonts= now so you never have to worry about it again.

You should be good to go!

* Installation
- for more check-out source here : https://github.com/domtronn/all-the-icons.el
You should be able to install this package in the standard way, add it to the
load path and then calling

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
(require 'all-the-icons))
;; or
(use-package all-the-icons
 :if (display-graphic-p))
#+END_SRC

** Installing Fonts
-In order for the icons to work it is very important that you install the
Resource Fonts included in this package, they are available in the fonts
directory. You can also install the latest fonts for this package in the
(guessed?) based on the OS by calling the following function;

=M-x all-the-icons-install-fonts=

-Bear in mind, this will also run fc-cache -f -v on MacOS and Linux which can
take some time to complete. For Windows, this function will prompt for a
download directory for you to install them manually.  Usage

-The simplest usage for this package is to use the following functions;
- The value of time
  - hello
    +next item
    1. The following
    2. And another

#+BEGIN_SRC emacs-lisp
    all-the-icons-icon-for-buffer
    all-the-icons-icon-for-dir
    all-the-icons-icon-for-file
    all-the-icons-icon-for-mode
    all-the-icons-icon-for-url
#+END_SRC

-Which can be used to get a formatted icon which you can insert into buffers,
e.g.
#+begin_src emacs-lisp
(insert (all-the-icons-icon-for-file "foo.js"))
    ;; Inserts a javascript icon
    ;; #("js-icon" 0 1 (display (raise -0.24) face (:family "alltheicon" :height 1.08 :foreground "#FFD446")))
#+end_src

* Bangla Session
                            ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶ó‡ßç‡¶®‡ßÅ/‡¶≤‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶∏ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßÄ!!
‡¶≤‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶π‡ßü‡ßá ‡¶ï‡¶ñ‡¶®‡ßã ‡¶ó‡ßç‡¶®‡ßÅ-‡¶á‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶®‡¶æ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá, ‡¶≤‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶∏ ‡¶Ø‡ßá‡¶® ‡¶Ü‡¶ß‡ßÅ‡¶∞‡¶æ‡¶á ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡¶æ‡ßü‡•§
    										‡¶¨‡¶æ‡¶£‡ßÄ‡¶§‡ßá-- ‡¶´‡ßá‡¶ï ‡¶è‡¶Æ. ‡¶∞‡ßÄ‡¶ö‡¶æ‡¶∞‡ßç‡¶° üòé

‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßã‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡ßü ‡¶≠‡¶æ‡¶≤‡¶¨‡¶æ‡¶∏‡¶ø‡•§‡•§
‡¶ö‡¶ø‡¶∞‡¶¶‡¶ø‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∂, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶æ

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≤‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶ø Emacs ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡•§ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶ü‡ßã-‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶æ‡¶®‡•§ ü•∞
